// @generated by protoc-gen-connect-web v0.3.2 with parameter "target=ts"
// @generated from file flow/legacy/execution/execution.proto (package execution, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ExecuteScriptAtBlockIDRequest, ExecuteScriptAtBlockIDResponse, GetAccountAtBlockIDRequest, GetAccountAtBlockIDResponse, GetEventsForBlockIDsRequest, GetEventsForBlockIDsResponse, GetTransactionResultRequest, GetTransactionResultResponse, PingRequest, PingResponse } from "./execution_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * ExecutionAPI is the API provided by the execution nodes.
 *
 * @generated from service execution.ExecutionAPI
 */
export const ExecutionAPI = {
  typeName: "execution.ExecutionAPI",
  methods: {
    /**
     * Ping is used to check if the access node is alive and healthy.
     *
     * @generated from rpc execution.ExecutionAPI.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetAccountAtBlockID gets an account by address at the given block ID
     *
     * @generated from rpc execution.ExecutionAPI.GetAccountAtBlockID
     */
    getAccountAtBlockID: {
      name: "GetAccountAtBlockID",
      I: GetAccountAtBlockIDRequest,
      O: GetAccountAtBlockIDResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ExecuteScriptAtBlockID executes a ready-only Cadence script against the
     * execution state at the block with the given ID.
     *
     * @generated from rpc execution.ExecutionAPI.ExecuteScriptAtBlockID
     */
    executeScriptAtBlockID: {
      name: "ExecuteScriptAtBlockID",
      I: ExecuteScriptAtBlockIDRequest,
      O: ExecuteScriptAtBlockIDResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetEventsForBlockIDs retrieves events for all the specified block IDs that
     * have the given type
     *
     * @generated from rpc execution.ExecutionAPI.GetEventsForBlockIDs
     */
    getEventsForBlockIDs: {
      name: "GetEventsForBlockIDs",
      I: GetEventsForBlockIDsRequest,
      O: GetEventsForBlockIDsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetTransactionResult gets the result of a transaction.
     *
     * @generated from rpc execution.ExecutionAPI.GetTransactionResult
     */
    getTransactionResult: {
      name: "GetTransactionResult",
      I: GetTransactionResultRequest,
      O: GetTransactionResultResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

